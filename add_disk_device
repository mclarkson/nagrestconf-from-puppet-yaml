#!/bin/bash
#
# Synopsis:
#     Adds all the disks a server has to monitoring.
#     List of servers is from stdin.
#
# Expects
#     yaml_filename\tlast_ran\thost_name\tdisks
#     disks should be comma delimited - as in the puppet yaml file.
#
# For example:
#
# ./puppet_last_run_delta name disks | \
#      ./prune_results numitems_in_col 4 , le 6 | \
#      ./prune_results col_value_compare 2 lt $((48*60*60)) | \
#      ./prune_results col_value_neg_regex 1 "^tl.*" | \
#      ./add_disk_device
#
# ./puppet_last_run_delta name disks | ./prune_results numitems_in_col 4 , le 6 | ./prune_results col_value_compare 2 lt $((48*60*60)) | ./prune_results col_value_neg_regex 1 "^tl.*" | ./add_disk_device

if [[ -r config.conf ]]; then
    . config.conf
else
    echo "No config.conf file found"
    exit 1
fi

[[ $BRIEF -eq 0 ]] && echo -e "\n#\n# add_disk_device run started on `date`\n#\n"

# Check LOC list
[[ $BRIEF -eq 0 ]] && echo -n "Checking servers... "
theres_a_problem=0
for RESTSVR in $LOC ;do
    res=`curl $OPTS -sfkn 'https://'${RESTSVR%%,*}'/rest/show/hosts?json=\{"folder":"'${RESTSVR##*,}'","filter":"qWeRtY"\}'`
    [[ $? -ne 0 ]] && { 
        echo "Problem with:"
        echo "    curl $OPTS -fkn 'https://${RESTSVR%%,*}/rest/show/hosts?json=\{\"folder\":\"${RESTSVR##*,}\",\"filter\":\"qWeRtY\"\}'"
        exit 1
    }
done
[[ $theres_a_problem -eq 1 ]] && exit 1

[[ $BRIEF -eq 0 ]] && echo "OK."

touch $ADD_CACHEFILE

#
# Read in the work list from stdin
#

while IFS=`echo -en "\t"` read yaml lastrun hst dsk nul; do
    workhost="${hst/ /}"
    IFS=, read -a dsks < <(echo "$dsk")
    workitem="${dsks[*]/ /}"
    found=0
    if grepline=`grep "^ *${workhost} " $ADD_CACHEFILE`; then
        # Use the cache value
        RESTSVR="${grepline#* }"
        found=1
    else
        # Try REST to see where workhost lives
        for RESTSVR in $LOC ;do
            res=`curl $OPTS -skn 'https://'${RESTSVR%%,*}'/rest/show/hosts?json=\{"folder":"'${RESTSVR##*,}'","filter":"'${workhost%%.*}'"\}'`
            [[ $res != '[]' ]] && { found=1 ; break ; }
        done
        [[ $found -eq 1 ]] && {
            # Update the cache file
            sed -i "/^ *${workhost} /d" $ADD_CACHEFILE
            echo "${workhost} $RESTSVR" >>$ADD_CACHEFILE
        }
    fi

    if [[ $found -eq 1 ]]; then
        [[ $BRIEF -eq 0 ]] && echo "${workhost} found on $RESTSVR"
        # Add or modify a 'Disk stat sdX' service check
        for disk in ${workitem} ; do
            diskshort="${disk##*/}" # E.g. c0d0
            if curl $OPTS -skn 'https://'${RESTSVR%%,*}'/rest/show/services?json=\{"folder":"'${RESTSVR##*,}'","filter":"'${workhost%%.*}'"\}' \
                | $JSON -b | grep '\[[0-9]*,3,' | grep -qs "Disk stat $diskshort"
            then
                [[ $BRIEF -eq 0 ]] && echo "  MODIFYING EXISTING $diskshort  ** MODIFY UNIMPLEMENTED **"
            else
                echo "  ADDING NEW $diskshort"
                curl $OPTS -sknX POST -d 'json={"folder":"'${RESTSVR##*,}'",
                    "name":"'${workhost%%.*}'",
                    "template":"std_stmpl",
                    "command":"check_any!check_diskstat.sh -b -d '$disk' -W 6 -C 12","svcdesc":"Disk stat '$diskshort'"}' \
                    https://${RESTSVR%%,*}/rest/add/services
            fi
        done
    else
        [[ $BRIEF -eq 0 ]] && echo "${workhost} not found"
    fi
done

exit 0

